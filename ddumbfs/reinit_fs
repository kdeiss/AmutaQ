#! /bin/bash
# Helper-Script to create new ddumbfs on USB-Disks and NFS-Shares
# This Script does not affect fstab or AmutaQ-Config.
# It is only used to recreate the ddumbfs on a already installed and running USB-/NFS-Disk.
#
# First Parameter is the folder of the mounted NFS-Share
# Second Parameter overwrites the DDUMBSIZE from Config if given
# The old DDUMBFS needs to be removed before, the Mount needs to be empty (0% or 1% used), but mounted
# There must be a file "diskinfo" in the root of the Disk containing the UUID of the Drive.
# (is created by x-diskformat, formatted like "UUID: abcd-efgh")
# V 0.0.1.11.6.20 ah: inital release only NFS
# V 0.0.2.15.6.20 ah: add support for direct attached USB-DISK, bugfixing
# V 0.0.3.21.9.20 ah update fdisk-grep for Mint 20
# V 0.0.4.27.11.20 ah fix: fdisk uses decimal . or , in different versions

TARGET=$1
DDUMBSIZE=80
ADIR="/opt/AmutaQ!"
source /opt/AmutaQ!/etc/AmutaQ!.conf
DISKINFO="$TARGET/diskinfo"

#overwrite ddumbsize if given via console
if [ ! -z $2 ];then
	DDUMBSIZE=$2
fi

#check if target-folder is there
if [ ! -d $TARGET ];then
    echo "TARGET-FOLDER DOES NOT EXIST"
        exit 1
fi

let DISKSIZE=0

#check if folder is mounted via nfs
mount |grep --quiet -w "$TARGET .*nfs"
if [ $? -eq 0 ] ; then
	DISKSIZE=`df |grep "$TARGET$" |tr -s " "|cut -f 2 -d " "`
	let DISKSIZE=$DISKSIZE*1045
fi

#check if folder is mounted via ext
input=`mount |grep "$TARGET .*ext"`
if [ $? -eq 0 ] ; then
	input=`echo $input |cut -f 1 -d " "`
	lines=`fdisk -l $input 2>/dev/null`
	while IFS= read -r line
	do
	    echo $line | grep -E "Disk|Festplatte.*[Bb]ytes" > /dev/null
	    if [ $? -eq 0 ] ; then
	        let DISKSIZE=`echo $line|cut -f 5 -d " "`
	        break
	    fi
	done <<< "$lines"
fi

#check if Disksize is set
if [ $DISKSIZE -eq 0 ] ;then
     echo "CAN'T DETECT DISKSIZE"
     exit 1
fi

#check if folder is empty
USED=`df |grep "$TARGET$" |tr -s " "|cut -f 5 -d " "`
if [ $USED != "0%" ] && [ $USED != "1%" ] ; then
    echo "TARGET-FOLDER IS NOT EMPTY"
        exit 1
fi

#check if ddumb is there
if [ -d "$TARGET/l0/ddumbfs" ];then
    echo "DDUMBFS IS STILL THERE. FIRST REMOVE MANUALLY BEFORE CREATE A NEW."
        exit 1
fi

if [ ! -f $DISKINFO ];then
    echo "NO DISKINFO FILE"
	exit 1
fi
#create DDUMPFS
UUID=`cat $DISKINFO |cut -f 2 -d " "`
let dsize=($DISKSIZE/100)*$DDUMBSIZE
IDIR="$ADIR/indexfiles"

mkdir $TARGET/l0 2>/dev/null
mkdir $TARGET/l0/ddumbfs 2>/dev/null
chmod 777 $TARGET/l0/ddumbfs
mkddumbfs -B 64k -i $IDIR/$UUID.idx -s $dsize $TARGET/l0/ddumbfs
echo -n "Copy Indexfile to disk: "
cp --preserve=timestamps "$IDIR/$UUID.idx" "$TARGET/l0/ddumbfs/"
echo Finished!
