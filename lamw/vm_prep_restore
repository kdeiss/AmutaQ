#! /bin/bash
# by k.deiss@it-userdesk.de
# create list of restore candidates

# V 0.0.1 2.1.23 initial release
# V 0.0.2 27.1.23 still beta small improvements

source /opt/AmutaQ!/etc/AmutaQ!.conf


MYRESTORECONF="/opt/AmutaQ!/etc/restore.conf"
# this variables should be defined in #MYRESTORECONF
#TARGET_DATASTORE="datastore1 ssd1" 	# the available datastores on the target ESXi server
#TARGET_DISK_FORMAT=3			# the disk format the restored disks shall have
#MYEDITOR=editor			# your prefered editor (defaults to editor) can be mcedit or whatever
#MY_NFS_IP=$BACKUPNETWORK_IP		# the ip your AmutaQ instance exposes nfs shares (defaults to $BACKUPNETWORK_IP)


#don't edit from here

function prep_basic_conf
{
if [[ -z $(grep '[^[:space:]]' $MYRESTORECONF 2>/dev/nul) ]] ; then
    echo "MYTARGETSERVER=\"0.0.0.0\"		# the target ESXi server" > $MYRESTORECONF
    echo "let MYRESTOREMODE=0    			# 0 = link vmdk files from nfs server / 1 = copy vmdk files to server" >> $MYRESTORECONF
    echo "TARGET_DATASTORE=\"datastore1 ssd1\" 	# the available datastores on the target ESXi server" >> $MYRESTORECONF
    echo "TARGET_DISK_FORMAT=3			# the target disk format  1 = zeroedthick / 2 = 2gbsparse / 3 = thin / 4 = eagerzeroedthick" >> $MYRESTORECONF
    echo "MYEDITOR=editor				# your prefered editor (defaults to editor) can be mcedit or whatever" >> $MYRESTORECONF
    echo "MY_NFS_IP=$BACKUPNETWORK_IP			# the ip your AmutaQ instance exposes nfs shares (defaults to BACKUPNETWORK_IP)" >> $MYRESTORECONF
fi
echo "generic configuration $MYRESTORECONF created!"
}

clear
#conf file existinng?
if [[ -z $(grep '[^[:space:]]' $MYRESTORECONF  2>/dev/nul) ]] ; then
    echo "$MYRESTORECONF not found or invalid!"
    prep_basic_conf
    echo "Please edit $MYRESTORECONF and run again!"
    rm -f $LOCKFILE
    exit 1
else 
    source $MYRESTORECONF
fi


# check whether is the default conf
if [ " $MYTARGETSERVER" == " 0.0.0.0" ];then
    echo "Invalid targetserver $MYTARGETSERVER "
    echo "Please edit $MYRESTORECONF and run again!"
    rm -f $LOCKFILE
    exit 1
fi



PATH0="/vmfs/volumes"
PATH1="/BUFFERDISK_${MY_NFS_IP}/bazaar"
PATH2="/DDUMBFS_${MY_NFS_IP}/bazaar"

SOURCEPATH=$PATH0$PATH1
SOURCEPATH1=$PATH0$PATH2

LOG=$ASYNC_LOG
BASEPATH="/opt/AmutaQ!/lamw"
LAMWLOG="/var/log/lamw_restore.log"
TMPLOG="/tmp/lamw_restore.log"
TMPOUTPUT="/tmp/lamw_restore_full.conf"
TMPOUTPUTESS="/tmp/lamw_restore.conf"


PF=`hostname`


##############script detection#########################
LOCKFILE=/tmp/$(basename $0).lck

if [ -f $LOCKFILE ] ; then
    SPID=`cat $LOCKFILE`
#    ps -e | grep $SPID >> /dev/null
    ps -o cmd -p $SPID |grep `basename $0` >> /dev/null
    if [ $? -eq 0 ] ; then
	echo "`date` INF $0 already running!"
	exit 1
    else
	echo "`date` WAR $0 has lockfile but is not running!"
    fi
fi


del_lock()
{
    echo "`date` WAR $0 external signal caught, exiting" 
    rm -f $LOCKFILE
}

trap "del_lock ; exit 1" 2 9 15
echo $$ > $LOCKFILE
##############script detection#########################




rm -f $TMPLOG
rm -f $TMPOUTPUT

cd $VMBACKUPTARGET
touch $TMPLOG
find . | grep ".vmx" > $TMPLOG

#echo "BACKUPS ON $VMBACKUPTARGET" >> $TMPOUTPUT
#echo "" >> $TMPOUTPUT

for REAL_TARGET_DATASTORE in $TARGET_DATASTORE
do
    #echo "REAL_TARGET_DATASTORE: $REAL_TARGET_DATASTORE"
    while read line
    do
	SDIR=`dirname "${SOURCEPATH}${line:1}"`
	echo "#\"$SDIR;$PATH0/$REAL_TARGET_DATASTORE;$TARGET_DISK_FORMAT\"" >> $TMPOUTPUT
    done < $TMPLOG
done



cd $ASYNCTARGET
find . | grep ".vmx" > $TMPLOG

for REAL_TARGET_DATASTORE in $TARGET_DATASTORE
do
    while read line
    do
	SDIR=`dirname "${SOURCEPATH1}${line:1}"`
	#echo "#\"$SDIR;$PATH0/$REAL_TARGET_DATASTORE;$TARGET_DISK_FORMAT\""
	echo "#\"$SDIR;$PATH0/$REAL_TARGET_DATASTORE;$TARGET_DISK_FORMAT\"" >> $TMPOUTPUT
    done < $TMPLOG
done


sort $TMPOUTPUT > $TMPLOG


echo "#<DIRECTORY or .TGZ>;<DATASTORE_TO_RESTORE_TO>;<DISK_FORMAT_TO_RESTORE>" > $TMPOUTPUT
echo "# DISK_FORMATS" >> $TMPOUTPUT
echo "# 1 = zeroedthick" >> $TMPOUTPUT
echo "# 2 = 2gbsparse" >> $TMPOUTPUT
echo "# 3 = thin" >> $TMPOUTPUT
echo "# 4 = eagerzeroedthick" >> $TMPOUTPUT
echo "# e.g." >> $TMPOUTPUT
echo "# \"/vmfs/volumes/dlgCore-NFS-bigboi.VM-Backups/WILLIAM_BACKUPS/STA202I/STA202I-2009-08-18--1;/vmfs/volumes/himalaya-local-SATA.RE4-GP:Storage;1\"" >> $TMPOUTPUT
echo "# uncomment the lines for machines you would like to restore!" >> $TMPOUTPUT
echo "" >> $TMPOUTPUT


cat $TMPLOG >> $TMPOUTPUT
$MYEDITOR $TMPOUTPUT

#make copy of old result

if [ -f ${TMPOUTPUTESS}.2 ] ; then
    cp ${TMPOUTPUTESS}.2 ${TMPOUTPUTESS}.3
fi

if [ -f ${TMPOUTPUTESS}.1 ] ; then
    cp ${TMPOUTPUTESS}.1 ${TMPOUTPUTESS}.2
fi

if [ -f $TMPOUTPUTESS ] ; then
    cp $TMPOUTPUTESS ${TMPOUTPUTESS}.1
fi


echo -n ""> $TMPOUTPUTESS
while read line
do
    if [ ! "${line:0:1}" == "#" ] && [ ! -z $line ]; then
	echo "$line" >> $TMPOUTPUTESS
    fi
done < $TMPOUTPUT

echo "-------------------------------------------------------------------"
echo "File $TMPOUTPUT created."
echo "Run: /opt/AmutaQ!/lamw/hand_restore"
echo "Or you can run it directly with: /opt/AmutaQ!/lamw/vm_restore_single $TMPOUTPUTESS IP_OF_YOUR_ESXi LINK/COPY(0/1)"
echo ""
echo "This machines are selected to be restored:"
cat $TMPOUTPUTESS

rm -f $TMPLOG
rm -f $LOCKFILE
